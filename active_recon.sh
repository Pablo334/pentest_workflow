#!/bin/bash

usage(){
    echo "Usage: $0"
}

exit_error_with_usage(){
    usage
    exit 1
}

exit_error_with_message(){
    echo $1
    exit 1
}

## Lists the main features of the script
main_list_features(){
    echo "Reconnaissance types"
    echo "1: Nmap full network scan => Discovers live hosts on network and performs comprehensive scan (version, os, script) for each host"
    echo "2: Massscan tcp scan on network => Scans all ports with tcp scan and returns xml output."
    echo "3: HTTP discovery via Gobuster and WhatWeb"
}

## Lists possibilities for option 3 (http discovery)
3_list_features(){
    echo "HTTP Discovery"
    echo "1: Run http discovery from live scan"
    echo "2: Run http discovery from nmap file"
}

## Checks if dependencies are installed (nmap, masscan)
check_installation(){
    if ! command -v ${1} 2>&1 1>/dev/null;then
        echo "[-][-] Missing ${1} dependency."
        read -p "[!][!] Proceed with installation? (Y|N): " answer
        case ${answer} in
            Y)  
                echo "[!][!] Installing ${1}"
                apt update && apt install ${1} -y
                ;;
            N)
                exit_error_with_message "[-][-] Exiting..."
                ;;
            *)
                exit_error_with_message "[-][-] Answer Y|N"
                ;;
        esac
    else
        echo "[+][+] ${1} dependency satisfied"
    fi
}

## Reads the target network and the output directory for the results
read_input_target(){
    read -p "Target: " TARGET
    ESCAPED_DEFAULT_OUTPUT_DIRECTORY=$(echo "${TARGET}" | sed -r 's/\/+/_/g')
    read -p "Output directory name (default: ${ESCAPED_DEFAULT_OUTPUT_DIRECTORY}): " OUTPUT_DIRECTORY

    if [[ -z ${OUTPUT_DIRECTORY} ]]; then
        OUTPUT_DIRECTORY=${ESCAPED_DEFAULT_OUTPUT_DIRECTORY}
    fi

    if [ ! -d ${OUTPUT_DIRECTORY} ]; then
        mkdir ${OUTPUT_DIRECTORY}
    fi
}

read_input_scan_directory(){
    read -p "Enter directory with nmap scan results: " SCAN_DIRECTORY

    if [[ -z ${SCAN_DIRECTORY} ]]; then
        exit_error_with_message "[-][-] Directory cannot be empty."
    fi
}

## Performs a full scan of the target network
## Scan 1: ICMP probe with echo, timestamp and subnet mask requests.
## Scan 2: tcp scan with service detection, os detection, all ports, default safe scripts, no ping
## Results are saved in all formats: nmap, gnmap, xml
nmap_full_network_scan(){
    echo "[!][!] Target set to ${1}."
    echo "[!][!] Starting ICMP probe to discover alive hosts. Sending echo, timestamp and subnet mask requests."
    nmap -PEPM -sP -n ${1} -oA ${2}/icmp_probe

    TARGET_BASE=$(echo ${1} | cut -d "." -f1-3)
    mapfile -t ALIVE_HOSTS < <( cat ${2}/icmp_probe.gnmap | cut -d ":" -f 2 | grep ${TARGET_BASE} | cut -d " " -f 2 | sort -u )

    echo "[!][!] Performing nmap full port scan to alive hosts"
    for host in "${ALIVE_HOSTS[@]}"
    do
        echo "[!][!] Scanning ${host}..."
        nmap -T4 -sV -sC -O -p- -n -Pn ${host} -oA ${3}/tcp_fullscan_${host}
    done
}

# Performs a tcp scan with masscan
masscan_tcp_scan(){
    echo "[!][!] Target set to ${1}."
    masscan ${1} -p0-65535 --rate 100000 -oX ${2}/masscan_tcp_scan.xml
}

# Ensure script is running as root
if [ "$EUID" -ne 0 ]
then 
    exit_error_with_message "Please run as root"
fi

main_list_features
read -p "Select reconnaissance method: " selection


case ${selection} in
    1)  
        check_installation "nmap"
        read_input_target
        
        # Output directory names for different scans
        NMAP_ICMP_PROBE_DIR=${OUTPUT_DIRECTORY}/nmap_icmp_probe_dir

        if [ ! -d ${NMAP_ICMP_PROBE_DIR} ];then
            mkdir ${NMAP_ICMP_PROBE_DIR}
        fi

        NMAP_FULL_SCAN_DIR=${OUTPUT_DIRECTORY}/nmap_full_scan
        if [ ! -d ${NMAP_FULL_SCAN_DIR} ];then
            mkdir ${NMAP_FULL_SCAN_DIR}
        fi
        
        nmap_full_network_scan ${TARGET} ${NMAP_ICMP_PROBE_DIR} ${NMAP_FULL_SCAN_DIR}
        ;;
    2)
        check_installation "masscan"
        read_input_target

        MASSCAN_OUTPUT_DIRECTORY=${OUTPUT_DIRECTORY}/masscan_tcp_scan
        if [ ! -d ${MASSCAN_OUTPUT_DIRECTORY} ];then
            mkdir ${MASSCAN_OUTPUT_DIRECTORY}
        fi

        masscan_tcp_scan ${TARGET} ${MASSCAN_OUTPUT_DIRECTORY}
        ;;
    3)

        3_list_features
        read -p "Select http discovery type: " http_selection

        case ${http_selection} in
            1)
                echo "[!][!] HTTP Discovery from live nmap scan"
                check_installation "nmap"
                check_installation "gobuster"
                check_installation "whatweb"
                read_input_target

                echo "[!][!] Running nmap scan to discover open ports on ${TARGET}"
                nmap ${TARGET} -oA ${OUTPUT_DIRECTORY}/scan_${TARGET} | tail -n +5 | head -n -3

                while read line
                do
                    if [[ ${line} == *open* ]] && [[ ${line} == *http* ]]
                    then
                        port=$(echo ${line} | cut -d "/" -f 1)
                        ## Check if it is running http or https
                        if [[ ${line} == *ssl* ]];then
                            url="https://${TARGET}:${port}"
                        else
                            url="http://${TARGET}:${port}"
                        fi

                        echo "[!][!] Found open http service on port ${port}. Running Gobuster on http://${TARGET}:${port}"
                        gobuster dir -u ${url} -w /usr/share/wordlists/dirb/common.txt -qz >> ${OUTPUT_DIRECTORY}/gobuster_output_${TARGET}

                        echo "[!][!] Running WhatWeb"
                        whatweb ${url} -v > ${OUTPUT_DIRECTORY}/whatweb_output_${TARGET}
                    fi
                done < ${OUTPUT_DIRECTORY}/scan_${TARGET}.nmap
                ;;
            2)
                echo "[!][!] HTTP Discovery from nmap scan files"
                check_installation "gobuster"
                check_installation "whatweb"

                read_input_scan_directory

                for filename in ${SCAN_DIRECTORY}/*.nmap
                do
                    
                    host=$(cat ${filename} | grep "Nmap scan report" | cut -d " " -f 5)

                    echo "Gobuster scan for host ${host}" >>  ${SCAN_DIRECTORY}/gobuster_output_${host}
                    echo "Whatweb scan for host ${host}" >>  ${SCAN_DIRECTORY}/whatweb_output_${host}

                    while read line
                    do
                        if [[ ${line} == *open* ]] && [[ ${line} == *http* ]]
                        then
                            port=$(echo ${line} | cut -d "/" -f 1)
                            ## Check if it is running http or https
                            if [[ ${line} == *ssl* ]];then
                                url="https://${host}:${port}"
                            else
                                url="http://${host}:${port}"
                            fi

                            echo "[!][!] Found open http service on port ${port}."
                            echo "[!][!] Running Gobuster on ${url}"
                            echo "HTTP PORT: ${port}" >>  ${SCAN_DIRECTORY}/gobuster_output_${host}
                            gobuster dir -u ${url} -w /usr/share/wordlists/dirb/common.txt -qz >> ${SCAN_DIRECTORY}/gobuster_output_${host}
                            echo "" >> ${SCAN_DIRECTORY}/gobuster_output_${host}

                            echo "[!][!] Running WhatWeb on ${url}"
                            echo "HTTP PORT: ${port}" >>  ${SCAN_DIRECTORY}/whatweb_output_${host}
                            whatweb ${url} -v >> ${SCAN_DIRECTORY}/whatweb_output_${host}
                            echo "" >> ${SCAN_DIRECTORY}/whatweb_output_${host}
                        fi
                    done < ${filename}
                done
                ;;
            *)
                exit_error_with_message "Selections 1|2"
                ;;
        esac
        ;;
    *)
        exit_error_with_usage
        ;;
esac