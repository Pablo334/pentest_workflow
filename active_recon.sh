#!/bin/bash

################################################### FUNCTIONS ####################################################################
## Show usage information
usage(){
    echo "Usage: $0"
    main_list_features
}

## Show usage and exit if error occurs
exit_error_with_usage(){
    usage
    exit 1
}

## Exit with error message
exit_error_with_message(){
    echo $1
    exit 1
}

## Lists the main features of the script
main_list_features(){
    echo "Reconnaissance types:"
    echo "1: Nmap full network scan => Discovers live hosts on network and performs comprehensive scan (version, os, script) for each host."
    echo "2: Massscan tcp scan on network => Scans all ports with tcp scan and returns xml output."
    echo "3: HTTP discovery via Gobuster, WhatWeb and Nikto."
    echo "4: Run Searchsploit to examine nmap results => searches each service identified by nmap against possible exploits on exploit-db.com"
    echo "5: Convert nmap output to html => converts nmap xml output to html"
    echo "6: Audit ssh => Audit ssh with ssh-audit tool"
}

## Lists possibilities for option 3 (http discovery)
3_list_features(){
    echo "HTTP Discovery:"
    echo "1: Run http discovery from live scan."
    echo "2: Run http discovery from nmap file."
}

## Checks if dependencies are installed (nmap, masscan)
check_installation(){
    if ! command -v ${1} 2>&1 1>/dev/null;then
        echo "[-][-] Missing ${1} dependency."
        if [[ ! -z ${2} ]];then
            read -p "[!][!] Proceed with installation? (Y|N): " answer
            case ${answer} in
                Y)  
                    echo "[!][!] Installing ${1}"
                    apt update && apt install ${1} -y
                    ;;
                N)
                    exit_error_with_message "[-][-] Exiting..."
                    ;;
                *)
                    exit_error_with_message "[-][-] Answer Y|N"
                    ;;
            esac
        fi
    else
        echo "[+][+] ${1} dependency satisfied"
    fi
}

read_output_directory(){
    read -p "Select output directory. Default ${RESULTS_DIRECTORY}: " SELECTED_RESULTS_DIRECTORY

    if [[ ! -z ${SELECTED_RESULTS_DIRECTORY} ]]; then
        RESULTS_DIRECTORY=${SELECTED_RESULTS_DIRECTORY}
    fi

    if [ ! -d ${RESULTS_DIRECTORY} ];then
        mkdir ${RESULTS_DIRECTORY}
    fi
}

## Reads the target network and the output directory for the results
read_input_target(){
    read -p "Target: " TARGET
    ESCAPED_DEFAULT_OUTPUT_DIRECTORY=$(echo "${TARGET}" | sed -r 's/\/+/_/g')

    if [ ! -d ${RESULTS_DIRECTORY}/${ESCAPED_DEFAULT_OUTPUT_DIRECTORY} ]; then
        mkdir ${RESULTS_DIRECTORY}/${ESCAPED_DEFAULT_OUTPUT_DIRECTORY}
    fi
}

## Reads path of nmap scan results
read_input_scan_directory(){
    read -p "Enter directory with nmap scan results: " SCAN_DIRECTORY

    if [[ -z ${SCAN_DIRECTORY} ]]; then
        exit_error_with_message "[-][-] Directory cannot be empty."
    fi
}

## Performs a full scan of the target network
## Scan 1: ICMP probe with echo, timestamp and subnet mask requests.
## Scan 2: tcp scan with service detection, os detection, all ports, default safe scripts, no ping
## Results are saved in all formats: nmap, gnmap, xml
nmap_full_network_scan(){
    echo "[!][!] Target set to ${1}."
    echo "[!][!] Starting ICMP probe to discover alive hosts. Sending echo, timestamp and subnet mask requests."
    #nmap -PEPM -sP -n ${1} -oA ${2}/icmp_probe

    TARGET_BASE=$(echo ${1} | cut -d "." -f1-2)
    mapfile -t ALIVE_HOSTS < <( cat ${2}/icmp_probe.gnmap | grep Up | cut -d ":" -f 2 | grep ${TARGET_BASE} | cut -d " " -f 2 | sort -u )

    echo "[!][!] Performing nmap full port scan to alive hosts"
    for host in "${ALIVE_HOSTS[@]}"
    do
        echo "[!][!] Scanning ${host}..."
        nmap -T4 -sV -sC -O -p- -n -Pn ${host} -oA ${3}/tcp_fullscan_${host}
    done
}

## Performs a tcp scan with masscan
## Results are saved in xml
masscan_tcp_scan(){
    echo "[!][!] Target set to ${1}."
    masscan ${1} -p0-65535 --rate 100000 -oX ${2}/masscan_tcp_scan.xml
}

## Performs a bruteforce attack on files and directories with gobuster
gobuster_scan(){
    # $1 => port
    # $2 => wordlist
    # $3 => outputpath
    # $4 => url
    # $5 => target
     
    echo "[!][!] Running Gobuster on ${4}"

    if [ ! -f ${3} ];then
        echo "Gobuster scan for host ${5}" >  ${3}
    fi
                        
    echo "HTTP PORT: ${1}" >> ${3}
    gobuster dir -u ${4} -w ${2} -qz >> ${3}
    echo "" >> ${3}
}

## Performs a scan with WhatWeb
whatweb_scan(){
    # $1 => port
    # $2 => outputpath
    # $3 => url
    # $4 => target

    echo "[!][!] Running WhatWeb on ${3}"

    if [ ! -f ${2} ];then
        echo "WhatWeb scan for host ${4}" >  ${2}
    fi

    echo "HTTP PORT: ${1}" >>  ${2}
    whatweb ${3} -v >> ${2}
    echo "" >> ${2}
}

## Performs a scan with Nikto
nikto_scan(){
    # $1 => port
    # $2 => outputpath
    # $3 => url
    # $4 => target

    echo "[!][!] Running Nikto on ${3}"

    if [ ! -f ${2} ];then
        echo "Nikto scan for host ${4}" > ${2}
    fi

    echo "HTTP PORT: ${1}" >>  ${2}
    nikto -h ${3} >> ${2}
    echo "" >> ${2}
}

## Examines nmap results (xml) against exploit-db to find possible exploits for running services
searchsploit_examine(){
    echo "[!][!] Examining ${1} with Searchsploit"

    searchsploit -x --nmap ${1} > ${2}
}

ssh_audit(){
    # $1 => port
    # $2 => target
    # $3 => outputpath

    ssh-audit.py -p ${1} ${2} > ${3}
}


################################################### SCRIPT LOGIC ####################################################################

# Ensure script is running as root
if [ "$EUID" -ne 0 ]
then 
    exit_error_with_message "Please run as root"
fi

# Display options and read user selection
main_list_features
read -p "Select reconnaissance method: " selection

# Create directory for storing results
RESULTS_DIRECTORY="active_recon_$(date +'%d_%m_%y:%H_%M_%S')"
SELECTED_RESULTS_DIRECTORY=""

read_output_directory



case ${selection} in
    1)  
        check_installation "nmap" "install"
        read_input_target
        
        # Output directory names for different scans
        NMAP_ICMP_PROBE_DIR=${RESULTS_DIRECTORY}/${ESCAPED_DEFAULT_OUTPUT_DIRECTORY}/nmap_icmp_probe_dir

        if [ ! -d ${NMAP_ICMP_PROBE_DIR} ];then
            mkdir ${NMAP_ICMP_PROBE_DIR}
        fi

        NMAP_FULL_SCAN_DIR=${RESULTS_DIRECTORY}/${ESCAPED_DEFAULT_OUTPUT_DIRECTORY}/nmap_full_scan
        if [ ! -d ${NMAP_FULL_SCAN_DIR} ];then
            mkdir ${NMAP_FULL_SCAN_DIR}
        fi
        
        nmap_full_network_scan ${TARGET} ${NMAP_ICMP_PROBE_DIR} ${NMAP_FULL_SCAN_DIR}
        ;;
    2)
        check_installation "masscan" "install"
        read_input_target

        MASSCAN_OUTPUT_DIRECTORY=${RESULTS_DIRECTORY}/${ESCAPED_DEFAULT_OUTPUT_DIRECTORY}/masscan_tcp_scan
        if [ ! -d ${MASSCAN_OUTPUT_DIRECTORY} ];then
            mkdir ${MASSCAN_OUTPUT_DIRECTORY}
        fi

        masscan_tcp_scan ${TARGET} ${MASSCAN_OUTPUT_DIRECTORY}
        ;;
    3)
        check_installation "gobuster"
        check_installation "whatweb"
        check_installation "nikto"

        3_list_features
        # Set default value of wordlist to use with Gobuster
        wordlist=/usr/share/wordlists/dirb/common.txt

        read -p "Select http discovery type: " http_selection

        # Propt for wordlist selection
        read -p "Enter path for wordlist to use with gobuster (default ${wordlist}): " in_wordlist

        if [[ ! -z ${in_wordlist} ]]; then
            wordlist=${in_wordlist}
        fi

        # If no valid wordlist exists then exit
        if [ ! -f ${wordlist} ];then
            exit_error_with_message "[-][-] No available wordlists. Make sure you give the path to an available wordlist."
        fi

        case ${http_selection} in
            1)
                echo "[!][!] HTTP Discovery from live nmap scan"
                check_installation "nmap" "install"
                read_input_target

                # Output paths
                NMAP_OUTPUT=${RESULTS_DIRECTORY}/${ESCAPED_DEFAULT_OUTPUT_DIRECTORY}/nmap_scan_${TARGET}
                GOBUSTER_OUTPUT=${RESULTS_DIRECTORY}/${ESCAPED_DEFAULT_OUTPUT_DIRECTORY}/gobuster_output_${TARGET}
                WHATWEB_OUTPUT=${RESULTS_DIRECTORY}/${ESCAPED_DEFAULT_OUTPUT_DIRECTORY}/whatweb_output_${TARGET}
                NIKTO_OUTPUT=${RESULTS_DIRECTORY}/${ESCAPED_DEFAULT_OUTPUT_DIRECTORY}/nikto_output_${TARGET}

                echo "[!][!] Running nmap scan to discover open ports on ${TARGET}"
                nmap ${TARGET} -oA ${NMAP_OUTPUT} | tail -n +5 | head -n -3

                while read line
                do
                    if [[ ${line} == *open* ]] && [[ ${line} == *http* ]]
                    then
                        port=$(echo ${line} | cut -d "/" -f 1)
                        ## Check if it is running http or https
                        if [[ ${line} == *ssl* || ${line} == *https* ]];then
                            url="https://${TARGET}:${port}"
                        else
                            url="http://${TARGET}:${port}"
                        fi

                        echo "Found http service on port ${port}."

                        gobuster_scan ${port} ${wordlist} ${GOBUSTER_OUTPUT} ${url} ${TARGET}

                        whatweb_scan ${port} ${WHATWEB_OUTPUT} ${url} ${TARGET}

                        nikto_scan ${port} ${NIKTO_OUTPUT} ${url} ${TARGET}
                        
                    fi
                done < ${NMAP_OUTPUT}.nmap
                ;;
            2)
                echo "[!][!] HTTP Discovery from nmap scan files"
                read_input_scan_directory

                for filename in ${SCAN_DIRECTORY}/*.nmap
                do
                    
                    host=$(cat ${filename} | grep "Nmap scan report" | cut -d " " -f 5)

                    GOBUSTER_OUTPUT=${RESULTS_DIRECTORY}/${SCAN_DIRECTORY}/gobuster_output_${host}
                    WHATWEB_OUTPUT=${RESULTS_DIRECTORY}/${SCAN_DIRECTORY}/whatweb_output_${host}
                    NIKTO_OUTPUT=${RESULTS_DIRECTORY}/${SCAN_DIRECTORY}/nikto_output_${host}

                    while read line
                    do
                        if [[ ${line} == *open* ]] && [[ ${line} == *http* ]]
                        then

                            port=$(echo ${line} | cut -d "/" -f 1)

                            ## Check if it is running http or https
                            if [[ ${line} == *ssl* ]];then
                                url="https://${host}:${port}"
                            else
                                url="http://${host}:${port}"
                            fi

                            echo "[!][!] Found open http service on port ${port}."

                            gobuster_scan ${port} ${wordlist} ${GOBUSTER_OUTPUT} ${url}

                            whatweb_scan ${port} ${WHATWEB_OUTPUT} ${url}
                            
                            nikto_scan ${port} ${WHATWEB_OUTPUT} ${url}
                
                        fi
                    done < ${filename}
                done
                ;;
            *)
                exit_error_with_message "Selections 1|2"
                ;;
        esac
        ;;
    4)
        check_installation "searchsploit"
        read_input_scan_directory

        for filename in ${SCAN_DIRECTORY}/*.xml
        do
            file=${filename##*/}
            file="${file%.*}_searchsploit.txt"
            echo "File: ${file}"
            SEARCHSPLOIT_OUTPUT_DIR="${RESULTS_DIRECTORY}/searchsploit_output"
            if [[ ! -d ${SEARCHSPLOIT_OUTPUT_DIR} ]];then
                mkdir ${SEARCHSPLOIT_OUTPUT_DIR}
            fi

            searchsploit_examine ${filename} ${SEARCHSPLOIT_OUTPUT_DIR}/${file}
        done
        ;;
    5)
        check_installation "xsltproc"
        read_input_scan_directory
        HTML_OUTPUT_DIRECTORY="${RESULTS_DIRECTORY}/html_output"

        for filename in ${SCAN_DIRECTORY}/*.xml
        do
            echo "[!][!] Converting ${filename}"
            html_file="${filename%.*}.html"
            xsltproc ${filename} -o ${html_file}
        done
        ;;
    6)
        check_installation "ssh-audit.py"
        SSH_OUTPUT_DIRECTORY="${RESULTS_DIRECTORY}/ssh_audit_output"

        if [[ ! -d ${SSH_OUTPUT_DIRECTORY} ]]; then
            mkdir ${SSH_OUTPUT_DIRECTORY}
        fi

        target=''
        port=22
        selected_port=''
        read -p "Enter target: " target 
        read -p "Enter port (Default ${port}):  " selected_port

        if [[ -z ${selected_port} ]];then
            selected_port=${port}
        fi

        OUT_FILE=${SSH_OUTPUT_DIRECTORY}/${target}.txt
        
        ssh_audit ${selected_port} ${target} ${OUT_FILE}
        ;;
    *)
        usage
        ;;
esac