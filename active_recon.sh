#!/bin/bash

usage(){
    echo "Usage: $0"
}

list_features(){
    echo "Reconnaissance types"
    echo "1: Nmap full network scan => Discovers live hosts on network and performs comprehensive scan (version, os, script) for each host"
    echo "2: Massscan tcp scan on network => Scans all ports with tcp scan and returns xml output."
}

exit_error_with_usage(){
    usage
    exit 1
}

exit_error_with_message(){
    echo $1
    exit 1
}

## Checks if dependencies are installed (nmap, masscan)
check_installation(){
    if ! command -v ${1} 2>&1 1>/dev/null;then
        echo "[-][-] Missing ${1} dependency."
        read -p "[!][!] Proceed with installation? (Y|N): " answer
        case ${answer} in
            Y)  
                echo "[!][!] Installing ${1}"
                apt update && apt install ${1} -y
                ;;
            N)
                exit_error_with_message "[-][-] Exiting..."
                ;;
            *)
                exit_error_with_message "[-][-] Answer Y|N"
                ;;
        esac
    else
        echo "[+][+] ${1} dependency satisfied"
    fi
}

## Reads the target network and the output directory for the results
read_input_network(){
    read -p "Target network: " TARGET_NETWORK
    ESCAPED_DEFAULT_OUTPUT_DIRECTORY=$(echo "${TARGET_NETWORK}" | sed -r 's/\/+/_/g')
    read -p "Output directory name (default: ${ESCAPED_DEFAULT_OUTPUT_DIRECTORY}): " OUTPUT_DIRECTORY

    if [[ -z ${OUTPUT_DIRECTORY} ]]; then
        OUTPUT_DIRECTORY=${ESCAPED_DEFAULT_OUTPUT_DIRECTORY}
    fi

    if [ ! -d ${OUTPUT_DIRECTORY} ]; then
        mkdir ${OUTPUT_DIRECTORY}
    fi
}

## Performs a full scan of the target network
## Scan 1: ICMP probe with echo, timestamp and subnet mask requests.
## Scan 2: tcp scan with service detection, os detection, all ports, default safe scripts, no ping
## Results are saved in all formats: nmap, gnmap, xml
nmap_full_network_scan(){
    echo "[!][!] Target network set to ${1}."
    echo "[!][!] Starting ICMP probe to discover alive hosts. Sending echo, timestamp and subnet mask requests."
    nmap -PEPM -sP -n ${1} -oA ${2}/icmp_probe

    TARGET_NETWORK_BASE=$(echo ${1} | cut -d "." -f1-3)
    mapfile -t ALIVE_HOSTS < <( cat ${2}/icmp_probe.gnmap | cut -d ":" -f 2 | grep ${TARGET_NETWORK_BASE} | cut -d " " -f 2 | sort -u )

    echo "[!][!] Performing nmap full port scan to alive hosts"
    for host in "${ALIVE_HOSTS[@]}"
    do
        echo "[!][!] Scanning ${host}..."
        nmap -T4 -sV -sC -O -p- -n -Pn ${host} -oA ${3}/tcp_fullscan_${host}
    done
}

# Performs a tcp scan with masscan
masscan_tcp_scan(){
    echo "[!][!] Target network set to ${1}."
    masscan ${1} -p0-65535 --rate 100000 -oX ${2}/masscan_tcp_scan.xml
}

# Ensure script is running as root
if [ "$EUID" -ne 0 ]
then 
    exit_error_with_message "Please run as root"
fi

list_features
read -p "Select reconnaissance method: " selection


case ${selection} in
    1)  
        check_installation "nmap"
        read_input_network
        
        # Output directory names for different scans
        NMAP_ICMP_PROBE_DIR=${OUTPUT_DIRECTORY}/nmap_icmp_probe_dir

        if [ ! -d ${NMAP_ICMP_PROBE_DIR} ];then
            mkdir ${NMAP_ICMP_PROBE_DIR}
        fi

        NMAP_FULL_SCAN_DIR=${OUTPUT_DIRECTORY}/nmap_full_scan
        if [ ! -d ${NMAP_FULL_SCAN_DIR} ];then
            mkdir ${NMAP_FULL_SCAN_DIR}
        fi
        
        nmap_full_network_scan ${TARGET_NETWORK} ${ICMP_PROBE_DIR} ${NMAP_FULL_SCAN_DIR}
        ;;

    2)
        check_installation "masscan"
        read_input_network

        MASSCAN_OUTPUT_DIRECTORY=${OUTPUT_DIRECTORY}/masscan_tcp_scan
        if [ ! -d ${MASSCAN_OUTPUT_DIRECTORY} ];then
            mkdir ${MASSCAN_OUTPUT_DIRECTORY}
        fi

        masscan_tcp_scan ${TARGET_NETWORK} ${MASSCAN_OUTPUT_DIRECTORY}
        ;;
    
    *)
        exit_error_with_usage
        ;;
esac