#!/bin/bash

function os_info(){
    echo "[!][!] Gathering information about operating system."
    (cat /proc/version || uname -a ) 2>/dev/null
    lsb_release -a 2>/dev/null
}

function path_info(){
    echo "[!][!] Gathering information from PATH environmental variable"
    echo $PATH
}

function env_info(){
    echo "[!][!] Gathering information about environment"
    (env || set) 2>/dev/null
}

function kernel_info(){
    ## Kernel exploits repositories:
    ### https://github.com/lucyoa/kernel-exploits
    ### https://github.com/offensive-security/exploitdb-bin-sploits
    ### https://github.com/bwbwbwbw/linux-exploit-binaries
    ### https://github.com/Kabot/Unix-Privilege-Escalation-Exploits-Pack

    echo "[!][!] Gathering kernel information"
    cat /proc/version
    uname -a
}

function check_if_kernel_in_vulnerable_list(){
    echo "[!][!] Collecting vulnerable kernel versions"
    mapfile -t vulnerable_kernels < <( curl https://raw.githubusercontent.com/lucyoa/kernel-exploits/master/README.md 2>/dev/null | grep "Kernels: " | cut -d ":" -f 2 | cut -d "<" -f 1 | tr -d "," | tr ' ' '\n' | grep -v "^\d\.\d$" | sort -u -r | tr '\n' ' ' )
    current_kernel_version=$(uname -r | cut -d "-" -f 1)
    
    if [[ " ${vulnerable_kernels[*]} " =~ " ${current_kernel_version} " ]]; then
        echo "[+][+] Current kernel version ${current_kernel_version} is in vulnerable list."
    else
        echo "[+][+] Current kernel version ${current_kernel_version} not in vulnerable list."
    fi
}

function check_kernel_exposure_on_publicly_known_exploits(){
    echo "[!][!] Running linux exploit suggeter to check kernel exposure against known exploits"
    source linux-exploit-suggester.sh
    if [ ! $? -eq 0 ]; then
        echo "[-][-] An error occurred while executing the script"
    fi
}

function defense_enumeration(){
    echo "[!][!] Performing defense enumeration"
    defense_enumeration_apparmor
    defense_enumeration_grsecurity
    defense_enumeration_pax
    defense_enumeration_execshield
    defense_enumeration_selinux
    defense_enumeration_aslr
}

function defense_enumeration_apparmor(){
    echo "[!][!] Enumerating apparmor defenses"

    if [ `which aa-status 2>/dev/null` ]; then
        aa-status
    elif [ `which apparmor_status 2>/dev/null` ]; then
        apparmor_status
    elif [ `ls -d /etc/apparmor* 2>/dev/null` ]; then
        ls -d /etc/apparmor*
    else
        echo "Not found AppArmor"
    fi
}

function defense_enumeration_grsecurity(){
    echo "[!][!] Enumerating grsecurity defenses"

    ((uname -r | grep "\-grsec" >/dev/null 2>&1 || grep "grsecurity" /etc/sysctl.conf >/dev/null 2>&1) && echo "Yes" || echo "Not found grsecurity")
}

function defense_enumeration_pax(){
    echo "[!][!] Enumerating pax defenses"

    (which paxctl-ng paxctl >/dev/null 2>&1 && echo "Yes" || echo "Not found PaX")
}

function defense_enumeration_execshield(){
    echo "[!][!] Enumerating execshield defenses"

    (grep "exec-shield" /etc/sysctl.conf || echo "Not found Execshield")
}

function defense_enumeration_selinux(){
    echo "[!][!] Enumerating selinux defenses"

    (sestatus 2>/dev/null || echo "Not found sestatus")
}

function defense_enumeration_aslr(){
    echo "[!][!] Enumerating ASLR defenses"

    if [[ $(cat /proc/sys/kernel/randomize_va_space 2>/dev/null) -eq 0 ]]; then
        echo "[+][+] ASLR disabled..."
    else
        echo "[-][-] ASLR enabled..."
    fi
}


################################################## WORKSPACE #########################################################
os_info
path_info
env_info
kernel_info
check_if_kernel_in_vulnerable_list
check_kernel_exposure_on_publicly_known_exploits
defense_enumeration